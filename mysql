前一段时间在项目中遇到一个问题，就是多选，然后将多选的item发送出去，由于涉及到操作数据库，所以就需要同时执行多条sql语句，
折腾良久也没有搞出来，现在偶然回过头来发现了async的这个知识点貌似可以解决这个问题，所以下面就实际项目案列做一个知识的收集与整理

1.以下是对mysql事务的一个简单操作，向mysql中插入一条数据的同时插入一条日志

code：
  var title = 'It is a new post';

connection.beginTransaction(function(err) {
  if (err) { throw err; }
  connection.query('INSERT INTO posts SET title=?', title, function(err, result) {
    if (err) {
      return connection.rollback(function() {
        throw err;
      });
    }

    var log = 'Post ' + result.insertId + ' added';

    connection.query('INSERT INTO log SET data=?', log, function(err, result) {
      if (err) {
        return connection.rollback(function() {
          throw err;
        });
      }
      connection.commit(function(err) {
        if (err) {
          return connection.rollback(function() {
            throw err;
          });
        }
        console.log('success!');
      });
    });
  });
});


这种方法倒是可以实现，但是嵌套的回掉函数确实有点令人难以阅读，一个简单的业务都嵌套了这么多层，要是业务再复杂一点的话，这嵌套关系就不能直视了，下面
用async来改装一下刚才的业务代码

2.假设需求是向log表中插入多条数据，最终返回执行结果，可以使用async.each函数：
 async:
 
  var sqls = [
  "INSERT INTO log SET data='data1'",
  "INSERT INTO log SET data='data2'",
  "INSERT INTO log SET data='data3'"
  ];
  
  async.each(sqls, function(item, callback) {
  // 遍历每条SQL并执行
  connection.query(item, function(err, results) {
    if(err) {
      // 异常后调用callback并传入err
      callback(err);
    } else {
    console.log(item + "执行成功");
      // 执行完成后也要调用callback，不需要参数
      callback();
    }
  });
}, function(err) {
  // 所有SQL执行完成后回调
  if(err) {
    console.log(err);
  } else {
    console.log("SQL全部执行成功");
  }
});

注意：async.each并不能保证执行成功一条SQL语句后再去执行下一条，所以如果有一条执行失败，不会影响到其他语句的执行。

3.async.eachSeries按顺序批量Insert
 需求：如果想要实现执行成功上一条语句后再开始执行数组中下一条语句，可以使用eachSeries函数
 
 var sqls = [
  "INSERT INTO log SET data='data1'",
  "INSERT INTO log SET data='data2'",
  "INSERT INTO log SET data='data3'"
];

async.eachSeries(sqls, function(item, callback) {
  // 遍历每条SQL并执行
  connection.query(item, function(err, results) {
    if(err) {
      // 异常后调用callback并传入err
      callback(err);
    } else {
      console.log(item + "执行成功");
      // 执行完成后也要调用callback，不需要参数
      callback();
    }
  });
}, function(err) {
  // 所有SQL执行完成后回调
  if(err) {
    console.log(err);
  } else {
    console.log("SQL全部执行成功");
  }
});

不同点：async.eachSeries保证了SQL的执行顺序，而且当其中一条执行异常，就不会继续执行下一条。


4.async.forEachOf获取多条Select语句的查询结果
plus：async.forEachOf类似于async.each，区别是可以接收Object类型参数，并且会在第二个参数回调函数中传入遍历到的每一项的key，更适合批量执行查询语句并返回结果

var sqls = {
  table_a: "select count(*) from table_a",
  table_b: "select count(*) from table_b",
  table_c: "select count(*) from table_c"
};

// 用于存放查询结果
var counts = {};

async.forEachOf(sqls, function(value, key, callback) {
  // 遍历每条SQL并执行
  connection.query(value, function(err, results) {
    if(err) {
      callback(err);
    } else {
      counts[key] = results[0]['count(*)'];
      callback();
    }
  });
}, function(err) {
  // 所有SQL执行完成后回调
  if(err) {
    console.log(err);
  } else {
    console.log(counts);
  }
});



5.async.map简化获取多条Select语句的查询结果
plus： 上面的async.forEachOf获取多条Select语句的查询结果的代码可以使用async.map函数简化成这样

var sqls = {
  table_a: "select count(*) from table_a",
  table_b: "select count(*) from table_b",
  table_c: "select count(*) from table_c"
};

async.map(sqls, function(item, callback) {
  connection.query(item, function(err, results) {
    callback(err, results[0]['count(*)']);
  });
}, function(err, results) {
  if(err) {
    console.log(err);
  } else {
    console.log(results);
  }
});


6.async.series按顺序执行多条任务

Async.js非常实用的一个功能就是流程控制。回到本文刚开始的那个开启事务执行Insert的例子，每一步都需要上一步执行成功后才能执行，很容易掉进回调大坑中。下面实用async.series函数来优化流程控制，让代码更优雅：

var title = 'It is a new post';

// 用于在posts插入成功后保存自动生成的ID
var postId = null;

// function数组，需要执行的任务列表，每个function都有一个参数callback函数并且要调用
var tasks = [function(callback) {
  // 开启事务
  connection.beginTransaction(function(err) {
    callback(err);
  });
}, function(callback) {
  // 插入posts
  connection.query('INSERT INTO posts SET title=?', title, function(err, result) {
    postId = result.insertId;
    callback(err);
  });
}, function(callback) {
  // 插入log
  var log = 'Post ' + postId + ' added';
  connection.query('INSERT INTO log SET data=?', log, function(err, result) {
    callback(err);
  });
}, function(callback) {
  // 提交事务
  connection.commit(function(err) {
    callback(err);
  });
}];

async.series(tasks, function(err, results) {
  if(err) {
    console.log(err);
    connection.rollback(); // 发生错误事务回滚
  }
  connection.end();
});

7.async.series获取多条SQL的结果

var tasks = {
  table_a: function(callback) {
    connection.query('select count(*) from table_a', function(err, result) {
      callback(err, result[0]['count(*)']); // 将结果传入callback
    });
  },
  table_b: function(callback) {
    connection.query('select count(*) from table_b', function(err, result) {
      callback(err, result[0]['count(*)']);
    });
  },
  table_c: function(callback) {
    connection.query('select count(*) from table_c', function (err, result) {
      callback(err, result[0]['count(*)']);
    });
  }
};

async.series(tasks, function(err, results) {
  if(err) {
    console.log(err);
  } else {
    console.log(results);
  }
  connection.end();
});
